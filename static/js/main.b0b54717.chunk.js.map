{"version":3,"sources":["components/DisplayCard/DisplayCard.js","components/Jumbotron/Jumbotron.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["DisplayCard","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Jumbotron","_ref","children","style","height","clear","paddingTop","textAlign","Wrapper","correctGuesses","bestScore","clickMessage","App","state","cards","_this","clickedCard","filter","card","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Jumbotron_Jumbotron","map","components_DisplayCard_DisplayCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0b54717.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./DisplayCard.css\";\n\nconst DisplayCard = props => (\n  <div onClick={() => props.setClicked(props.id)} className=\"card\">\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default DisplayCard;\n","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = ({ children }) => (\n  <div\n    style={{ height: 180, clear: \"both\", paddingTop: 10, textAlign: \"center\" }}\n    className=\"jumbotron\"\n  >\n    {children}\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport DisplayCard from \"./components/DisplayCard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage =\n  \"Click on an image to earn points, but don't click on the same image twice!\";\n\nclass App extends Component {\n  state = {\n    cards,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  setClicked = id => {\n    const cards = this.state.cards;\n\n    const clickedCard = cards.filter(card => card.id === id);\n\n    if (clickedCard[0].clicked) {\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Better luck next time. Thanks for Playing!\";\n\n      for (let i = 0; i < cards.length; i++) {\n        cards[i].clicked = false;\n      }\n\n      this.setState({ clickMessage });\n      this.setState({ correctGuesses });\n      this.setState({ cards });\n    } else if (correctGuesses < 11) {\n      clickedCard[0].clicked = true;\n\n      correctGuesses++;\n\n      clickMessage = \"Don't Quit! It's 4th and Goal!\";\n\n      if (correctGuesses > bestScore) {\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n      }\n\n      cards.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      this.setState({ cards });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    } else {\n      clickedCard[0].clicked = true;\n\n      correctGuesses = 0;\n\n      clickMessage = \"TOUCHDOWN!\";\n      bestScore = 12;\n      this.setState({ bestScore });\n\n      for (let i = 0; i < cards.length; i++) {\n        cards[i].clicked = false;\n      }\n\n      cards.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      this.setState({ cards });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron>\n          <h1>NFL NFC Logo Memory Game</h1>\n\n          <span className=\"scoreSummary\">\n            {this.state.clickMessage}\n            <hr />\n            Correct Guesses: {this.state.correctGuesses}\n            <br />\n            Best Score: {this.state.bestScore}\n          </span>\n          <br />\n        </Jumbotron>\n\n        {this.state.cards.map(card => (\n          <DisplayCard\n            setClicked={this.setClicked}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}